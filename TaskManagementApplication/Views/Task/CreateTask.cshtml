@model TaskManagementApplication.Models.TaskViewModel

<div class="row">
    <div class="col-md-12">
        <div class="panel panel-primary list-panel" id="list-panel">
            <div class="panel-heading list-panel-heading">
                <h1 class="panel-title list-panel-title">Add Task</h1>
            </div>
            <div class="panel-body">
                @using (Ajax.BeginForm("CreateTask", "Task", null, new AjaxOptions { HttpMethod = "Post", OnSuccess = "CreateTaskSuccess" }, new { @class = "form-horizontal", role = "form" }))
    {
            <div class="body-content">
                <div id="formTask" class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-group">
                        @Html.LabelFor(model => model.TaskName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.TaskName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.TaskName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FinishDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FinishDate, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            @Html.ValidationMessageFor(model => model.FinishDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.TaskListId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.TaskListId, Model.ListTaskList, "Select One", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.TaskListId, "", htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                    </div>


                </div>
            </div>
            <div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" class="btn btn-primary" value="Save" />
                    </div>
                </div>
            </div>
}
            </div>

        </div>
    </div>
</div>



@section Scripts
{

    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")



<script type="text/javascript">

        $(document).ready(function () {
            $('input[type=datetime]').datepicker({
                dateFormat: "dd/M/yy",
                changeMonth: true,
                changeYear: true,
                yearRange: "-60:+0"
            });

            SetCurrentDate();
        });

        function CreateTaskSuccess(data) {

            if (data != "success") {
                $('#createTaskListContainer').html(data);

                $(':input', '#formTask')
                    .not(':button, :submit, :reset, :hidden')
                    .val('')

                SetCurrentDate();

                 window.location.href='@Url.Action("Index", "TaskList")';
            }
    }

        function SetCurrentDate() {

            var today = new Date();
            var endDate = new Date();
            endDate.setDate(today.getDate() + 14);

            
            $("#StartDate").datepicker().datepicker("setDate", today);
            $("#FinishDate").datepicker().datepicker("setDate", endDate);

        }

</script>

}